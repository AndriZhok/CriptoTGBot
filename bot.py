import logging
import os
import asyncio

import dp
import requests

from aiogram import Bot, Dispatcher
from aiogram import F
from aiogram import types
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.filters import Command
from dotenv import load_dotenv

from database import (
    get_subscribers,
    add_wallet,
    update_balance,
    delete_wallet,
    get_user_wallets,
    get_all_wallets,
    is_admin,
    add_admin,
    update_db_schema,
    add_subscriber,
    is_user_approved,
    approve_user,
    remove_subscriber,
    is_user_subscribed, ensure_default_admin,
)


# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (–æ–Ω–æ–≤–ª–µ–Ω–µ)
async def get_main_menu(user_id):
    """–§–æ—Ä–º—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    is_subscribed = await is_user_subscribed(user_id)
    if await is_admin(user_id):
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìã –ú–æ—ó –≥–∞–º–∞–Ω—Ü—ñ"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
                [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å")],
                [KeyboardButton(text="üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å"), KeyboardButton(text="‚ö° –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")],
                [KeyboardButton(text="üë• –°—Ö–≤–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"), KeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É")],  # ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
                [
                    KeyboardButton(
                        text="üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" if is_subscribed else "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
                    )
                ],
            ],
            resize_keyboard=True,
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(
                        text="üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" if is_subscribed else "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
                    )
                ]
            ],
            resize_keyboard=True,
        )


@dp.message(F.text == "üë• –°—Ö–≤–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
async def approve_users_button_handler(message: Message):
    """–ê–¥–º—ñ–Ω –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É "–°—Ö–≤–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø–∏—Ç—ñ–≤"""
    await pending_users_handler(message)


async def check_access(message: Message):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞"""
    user_id = message.from_user.id
    if not await is_user_approved(user_id):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return False
    return True



# üìå –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.from_user.id
    username = (
        message.from_user.username or f"user_{user_id}"
    )  # –Ø–∫—â–æ username –≤—ñ–¥—Å—É—Ç–Ω—ñ–π

    from database import add_user

    await add_user(user_id, username)  # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É –∑ username

    if not await is_user_approved(user_id):
        await message.answer(
            "‚ùå –î–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    role = "–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if await is_admin(user_id) else "–∑–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    menu = await get_main_menu(user_id)  # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ä–æ–ª—ñ

    await message.answer(f"üëã –í—ñ—Ç–∞—é! –í–∏ {role}. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=menu)


def get_usdt_balance(wallet_address):
    """–û—Ç—Ä–∏–º—É—î –±–∞–ª–∞–Ω—Å USDT (TRC20) –Ω–∞ –≥–∞–º–∞–Ω—Ü—ñ —á–µ—Ä–µ–∑ API Tronscan"""
    url = f"https://apilist.tronscan.org/api/account?address={wallet_address}"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()

        usdt_balance = 0
        for token in data.get("trc20token_balances", []):
            if token["tokenName"] == "Tether USD":
                usdt_balance = int(token["balance"]) / 1_000_000

        return usdt_balance
    except requests.RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É USDT: {e}")
        return 0


# üìå –ü–µ—Ä–µ–≥–ª—è–¥ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def balance_handler(message: Message):
    """–ü–æ–∫–∞–∑—É—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É USDT"""
    if not await check_access(message):
        return

    user_id = message.from_user.id
    wallets = await get_user_wallets(user_id)

    if not wallets:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤.")
        return

    for name, address, last_balance in wallets:
        balance = get_usdt_balance(address)  # ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å USDT
        await update_balance(address, balance)  # ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —É –ë–î

        await message.answer(
            f"üìå **{name}**\n"
            f"üìç `{address}`\n"
            f"üí∞ {balance:.2f} USDT",
            parse_mode="Markdown",
        )


@dp.message(Command("add_wallet"))
async def add_wallet_handler(message: Message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /add_wallet: (–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    user_id = message.from_user.id

    # üîí –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    if not await is_admin(user_id):
        await message.answer("‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –≥–∞–º–∞–Ω—Ü—ñ.")
        return

    parts = message.text.split(maxsplit=2)

    if len(parts) < 3:  # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É", callback_data="copy_add_wallet"
                    )
                ]
            ]
        )

        await message.answer(
            "‚úè **–©–æ–± –¥–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:**\n"
            "`/add_wallet –ù–∞–∑–≤–∞ –ê–¥—Ä–µ—Å–∞`\n\n"
            "üìå **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è!**",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –Ω–∞–∑–≤—É —Ç–∞ –∞–¥—Ä–µ—Å—É ‚Äì –¥–æ–¥–∞—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å
    name, address = parts[1], parts[2]

    success = await add_wallet(user_id, name, address)

    if success:
        await message.answer(f"‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å `{name}` (`{address}`) —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    else:
        await message.answer("‚ö†Ô∏è –ì–∞–º–∞–Ω–µ—Ü—å –∑ —Ç–∞–∫–æ—é –∞–¥—Ä–µ—Å–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")


@dp.callback_query(lambda c: c.data == "copy_add_wallet")
async def copy_add_wallet_callback(callback_query):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ–º–∞–Ω–¥—É /add_wallet –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —É —á–∞—Ç"""
    await bot.send_message(callback_query.from_user.id, "/add_wallet –ù–∞–∑–≤–∞ –ê–¥—Ä–µ—Å–∞")
    await bot.answer_callback_query(
        callback_query.id, text="‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —É –≤–∞—à —á–∞—Ç!"
    )


# üìå –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥–∞–º–∞–Ω—Ü—ñ–≤ + –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@dp.message(Command("wallets"))
async def wallets_handler(message: Message):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –≥–∞–º–∞–Ω—Ü—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–ª–∞–Ω—Å–æ–º –∑ –ë–î (–±–µ–∑ –∑–∞–ø–∏—Ç—É –¥–æ API)"""
    if not await check_access(message):
        return

    user_id = message.from_user.id
    wallets = await get_user_wallets(user_id)

    if not wallets:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤.")
        return

    for name, address, last_balance in wallets:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_wallet:{address}"
                    )
                ]
            ]
        )

        await message.answer(
            f"üìå **{name}**\n"
            f"üìç `{address}`\n"
            f"üí∞ {last_balance:.2f} USDT",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )


@dp.callback_query(lambda c: c.data.startswith("delete_wallet:"))
async def delete_wallet_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è"""
    user_id = callback_query.from_user.id
    address = callback_query.data.split(":")[1]

    success = await delete_wallet(user_id, address)

    if success:
        await callback_query.message.edit_text(f"‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å `{address}` –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await callback_query.message.answer(
            "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –≤–∂–µ –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π."
        )

    await callback_query.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è


@dp.message(Command("subscribe"))
async def subscribe_handler(message: Message):
    """–î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤"""
    if not await check_access(message):
        return

    user_id = message.from_user.id
    success = await add_subscriber(user_id)

    if success:
        await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è!")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω—é –ø—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏
        menu = await get_main_menu(user_id)
        await message.answer("–û–Ω–æ–≤–ª–µ–Ω–æ –º–µ–Ω—é:", reply_markup=menu)
    else:
        await message.answer("‚ö† –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.")


async def check_wallets():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–ª–∞–Ω—Å–∏ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º"""
    wallets = await get_all_wallets()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ

    logging.info(f"üîÑ –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—ñ–≤, –∑–Ω–∞–π–¥–µ–Ω–æ {len(wallets)} –≥–∞–º–∞–Ω—Ü—ñ–≤")

    for name, address, last_balance in wallets:
        new_balance = get_usdt_balance(address)  # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å USDT
        logging.info(
            f"üîç –ì–∞–º–∞–Ω–µ—Ü—å {name} ({address}): —Å—Ç–∞—Ä–∏–π –±–∞–ª–∞–Ω—Å {last_balance} USDT, –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å {new_balance} USDT"
        )

        if new_balance != last_balance:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –±–∞–ª–∞–Ω—Å
            diff_usdt = new_balance - last_balance
            balance_usdt = new_balance

            if diff_usdt > 0:
                message = (
                    f"üì• **–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è USDT!**\n"
                    f"üîπ **{name}**\n"
                    f"üìç `{address}`\n"
                    f"üí∞ +{diff_usdt:.2f} USDT\n"
                    f"üè¶ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {balance_usdt:.2f} USDT"
                )
            else:
                message = (
                    f"üì§ **–ó–Ω—è—Ç—Ç—è –∫–æ—à—Ç—ñ–≤!**\n"
                    f"üîπ **{name}**\n"
                    f"üìç `{address}`\n"
                    f"üí∏ {abs(diff_usdt):.2f} USDT\n"
                    f"üè¶ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {balance_usdt:.2f} USDT"
                )

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            subscribers = await get_subscribers()
            logging.info(f"‚úâ –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è {len(subscribers)} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º")

            for user_id in subscribers:
                try:
                    if diff_usdt > 0 or await is_admin(user_id):  # üîπ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–Ω—è—Ç—Ç—è —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∞–º
                        await bot.send_message(user_id, message)
                        logging.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                except Exception as e:
                    logging.error(
                        f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}"
                    )

            # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —É –±–∞–∑—ñ
            await update_balance(address, new_balance)
            logging.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å —É –±–∞–∑—ñ –¥–ª—è {name} ({address})")


async def total_balance_handler(message: Message):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤ (–±–µ–∑ –∑–∞–ø–∏—Ç—É –¥–æ API)"""
    if not await check_access(message):
        return
    user_id = message.from_user.id
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    wallets = await get_all_wallets()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ –∑ –ë–î
    total_usdt = 0
    text_parts = []  # –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–∏–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    current_text = "üìä **–í—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ —Ç–∞ —ó—Ö –±–∞–ª–∞–Ω—Å–∏ (USDT):**\n"

    for name, address, last_balance in wallets:
        total_usdt += last_balance

        new_line = f"üîπ {name}: `{address}`\nüí∞ {last_balance:.2f} USDT\n\n"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î–º–æ –ª—ñ–º—ñ—Ç —É 4096 —Å–∏–º–≤–æ–ª—ñ–≤
        if len(current_text) + len(new_line) > 4000:
            text_parts.append(current_text)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–ª–æ–∫
            current_text = ""  # –û—á–∏—â–∞—î–º–æ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª–æ–∫—É

        current_text += new_line  # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫

    # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å —É –∫—ñ–Ω–µ—Ü—å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –±–ª–æ–∫—É
    current_text += f"\nüí∞ **–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:** {total_usdt:.2f} USDT"
    text_parts.append(current_text)  # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –±–ª–æ–∫

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    for part in text_parts:
        await message.answer(part)

@dp.message(Command("set_admin"))
async def set_admin_handler(message: Message):
    """–ü—Ä–∏–∑–Ω–∞—á–∞—î —ñ–Ω—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    user_id = message.from_user.id

    if not await is_admin(user_id):  # üîí –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer(
            "‚ùå **–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π!**\n\n"
            "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ `user_id` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
            "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É [@userinfobot](https://t.me/userinfobot)\n"
            "2Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É `/start`\n"
            "3Ô∏è‚É£ –°–∫–æ–ø—ñ—é–π—Ç–µ `user_id` —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"
            "`/set_admin user_id`",
            disable_web_page_preview=True,
        )
        return

    new_admin_id = int(parts[1])

    from database import is_user_exists

    if not await is_user_exists(new_admin_id):
        await message.answer(
            f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{new_admin_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞."
        )
        return

    await add_admin(new_admin_id)
    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{new_admin_id}` —Ç–µ–ø–µ—Ä —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")


async def scheduled_checker():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–ª–∞–Ω—Å–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω"""
    while True:
        await check_wallets()
        await asyncio.sleep(300)  # –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥


dp.message(Command("subscribe"))


async def subscribe_handler(message: Message):
    """–î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤"""
    if not await check_access(message):
        return
    user_id = message.from_user.id
    await add_subscriber(user_id)
    await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è!")


@dp.message(Command("pending_users"))
async def pending_users_handler(message: Message):
    """–ê–¥–º—ñ–Ω –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å —Å—Ö–≤–∞–ª–µ–Ω–Ω—è"""
    user_id = message.from_user.id

    if not await is_admin(user_id):  # üîí –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    from database import get_pending_users

    pending_users = await get_pending_users()  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

    if not pending_users:
        await message.answer("‚úÖ –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å —Å—Ö–≤–∞–ª–µ–Ω–Ω—è.")
        return

    for user_id, username in pending_users:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve:{user_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{user_id}"
                    )
                ],
            ]
        )

        await message.answer(
            f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á**: @{username}\nüÜî `{user_id}`", reply_markup=keyboard
        )


@dp.callback_query(lambda c: c.data.startswith("approve:"))
async def approve_user_callback(callback: types.CallbackQuery):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ö–≤–∞–ª—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = int(callback.data.split(":")[1])
    await approve_user(user_id)  # –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –æ–Ω–æ–≤–ª—é—î –±–∞–∑—É –¥–∞–Ω–∏—Ö

    await bot.send_message(
        user_id, "‚úÖ –í–∞—Å —Å—Ö–≤–∞–ª–∏–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä! –í–∏ —Ç–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º."
    )
    await callback.message.edit_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{user_id}` —Å—Ö–≤–∞–ª–µ–Ω–∏–π!")
    await callback.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ö–≤–∞–ª–µ–Ω–∏–π")


@dp.callback_query(lambda c: c.data.startswith("reject:"))
async def reject_user_callback(callback: types.CallbackQuery):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥—Ö–∏–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = int(callback.data.split(":")[1])

    from database import remove_user

    await remove_user(user_id)  # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏

    await callback.message.edit_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{user_id}` –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π.")
    await callback.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π")


@dp.message(Command("approve"))
async def approve_user_handler(message: Message):
    """–°—Ö–≤–∞–ª—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º"""
    admin_id = message.from_user.id

    if not await is_admin(admin_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:\n`/approve user_id`")
        return

    user_id = int(parts[1])
    await approve_user(user_id)
    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{user_id}` —Ç–µ–ø–µ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞!")


@dp.message(F.text == "üìã –ú–æ—ó –≥–∞–º–∞–Ω—Ü—ñ")
async def show_wallets(message: Message):
    if not await check_access(message):
        return
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    await wallets_handler(message)


@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏, –Ω–µ –∑–∞–ø–∏—Ç—É—é—á–∏ API"""
    if not await check_access(message):
        return

    user_id = message.from_user.id
    wallets = await get_user_wallets(user_id)  # –û—Ç—Ä–∏–º—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î

    if not wallets:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤.")
        return

    for name, address, last_balance in wallets:
        await message.answer(
            f"üìå **{name}**\n"
            f"üìç `{address}`\n"
            f"üí∞ {last_balance:.2f} USDT",  # –ë–∞–ª–∞–Ω—Å –±–µ—Ä–µ—Ç—å—Å—è –∑ –ë–î, –∞ –Ω–µ API
            parse_mode="Markdown",
        )


@dp.message(Command("update_db"))
async def update_db_handler(message: Message):
    """–û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å —É—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤ —É –±–∞–∑—ñ (—Ä—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)"""
    if not await check_access(message):
        return

    await message.answer("‚è≥ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
    await check_wallets()  # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤

    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = message.from_user.id
    updated_menu = await get_main_menu(user_id)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –º–µ–Ω—é

    await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=updated_menu)


@dp.message(F.text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É")
async def update_db_button_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É'"""
    await update_db_handler(message)


@dp.message(F.text == "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å")
async def total_balance_button(message: Message):
    if not await check_access(message):
        return
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    await total_balance_handler(message)


@dp.message(F.text == "‚ö° –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def set_admin_button(message: Message):
    if not await check_access(message):
        return
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    """–ù–∞–¥–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∑ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è user_id —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–º–∞–Ω–¥–∏"""
    explanation = (
        "üë§ **–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ `user_id` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:**\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É [@userinfobot](https://t.me/userinfobot)\n"
        "2Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É `/start`\n"
        "3Ô∏è‚É£ –°–∫–æ–ø—ñ—é–π—Ç–µ –æ—Ç—Ä–∏–º–∞–Ω–∏–π `user_id`\n\n"
        "‚úè **–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:**\n"
        "`/set_admin user_id`"
    )

    await message.answer(explanation, disable_web_page_preview=True)


@dp.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å")
async def add_wallet_button(message: Message):
    if not await check_access(message):
        return
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìã –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É", callback_data="copy_add_wallet"
                )
            ]
        ]
    )

    await message.answer(
        "‚úè **–©–æ–± –¥–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:**\n"
        "`/add_wallet –ù–∞–∑–≤–∞ –ê–¥—Ä–µ—Å–∞`\n\n"
        "üìå **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è!**",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


@dp.message(Command("unsubscribe"))
async def unsubscribe_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏ –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    user_id = message.from_user.id
    await remove_subscriber(user_id)
    await message.answer(
        "‚ùå –í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å. –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è ‚Äì —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /subscribe."
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω—é –ø—ñ—Å–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏
    menu = await get_main_menu(user_id)
    await message.answer("–û–Ω–æ–≤–ª–µ–Ω–æ –º–µ–Ω—é:", reply_markup=menu)


@dp.message(F.text == "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
async def subscribe_button_handler(message: Message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ 'üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è'"""
    await subscribe_handler(message)


@dp.message(F.text == "üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
async def unsubscribe_button_handler(message: Message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ 'üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'"""
    await unsubscribe_handler(message)


@dp.callback_query(lambda c: c.data.startswith("delete_wallet:"))
async def delete_wallet_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è"""
    user_id = callback_query.from_user.id
    address = callback_query.data.split(":")[1]

    success = await delete_wallet(user_id, address)

    if success:
        await callback_query.message.edit_text(f"‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å `{address}` –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await callback_query.message.answer(
            "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –≤–∂–µ –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π."
        )

    await callback_query.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è


async def main():
    await update_db_schema()  # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É is_subscribed
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–∞!")
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    await ensure_default_admin()
    asyncio.create_task(scheduled_checker())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
