import logging
import os
import asyncio

import dp
import requests

from aiogram import Bot, Dispatcher
from aiogram import F
from aiogram import types
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.filters import Command
from dotenv import load_dotenv

from database import (
    get_subscribers,
    add_wallet,
    update_balance,
    delete_wallet,
    get_user_wallets,
    get_all_wallets,
    is_admin,
    add_admin,
    update_db_schema,
    add_subscriber,
)


# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
print(f"‚úÖ Loaded TOKEN: {TOKEN}")

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (–æ–Ω–æ–≤–ª–µ–Ω–µ)
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–æ—ó –≥–∞–º–∞–Ω—Ü—ñ"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
        [
            KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å"),
        ],
        [
            KeyboardButton(text="üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å"),
            KeyboardButton(text="‚ö° –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        ],
        [KeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")],
    ],
    resize_keyboard=True,
)


# üìå –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    from database import add_user  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é

    await add_user(user_id)  # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É

    if await is_admin(user_id):
        role = "–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    else:
        role = "–∑–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"

    await message.answer(f"üëã –í—ñ—Ç–∞—é! –í–∏ {role}. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu)


# üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É TRX —á–µ—Ä–µ–∑ API Trongrid
def get_trx_balance(address):
    """–û—Ç—Ä–∏–º—É—î –±–∞–ª–∞–Ω—Å TRX –Ω–∞ –≥–∞–º–∞–Ω—Ü—ñ —á–µ—Ä–µ–∑ Trongrid API"""
    url = f"https://api.trongrid.io/v1/accounts/{address}"

    try:
        response = requests.get(url, timeout=5)  # ‚è≥ –î–æ–¥–∞—î–º–æ —Ç–∞–π–º-–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        response.raise_for_status()  # üöÄ –ü—ñ–¥–Ω—ñ–º–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ HTTP > 400
        data = response.json()

        if "data" in data and len(data["data"]) > 0:
            balance = (
                data["data"][0].get("balance", 0) / 1_000_000
            )  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑ SUN —É TRX
            return balance
        return 0

    except requests.Timeout:
        print("‚è≥ –¢–∞–π–º-–∞—É—Ç –∑–∞–ø–∏—Ç—É Trongrid API")
    except requests.ConnectionError:
        print("üö´ –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Trongrid API")
    except requests.RequestException as e:
        print(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É Trongrid: {str(e)}")

    return 0  # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 0


# üìå –ü–µ—Ä–µ–≥–ª—è–¥ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message(Command("balance"))
async def balance_handler(message: Message):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–ª–∞–Ω—Å —É—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –π–æ–≥–æ –≤ –±–∞–∑—ñ"""
    user_id = message.from_user.id
    wallets = await get_user_wallets(user_id)

    if not wallets:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤.")
        return

    text = "üìä **–í–∞—à—ñ –≥–∞–º–∞–Ω—Ü—ñ —Ç–∞ –±–∞–ª–∞–Ω—Å–∏:**\n"
    for name, address, last_balance in wallets:
        balance = get_trx_balance(address)  # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
        await update_balance(address, balance)  # üîπ –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —É –ë–î
        text += f"üîπ {name}: `{address}` ‚Üí {balance} TRX\n"

    await message.answer(text)



@dp.message(Command("add_wallet"))
async def add_wallet_handler(message: Message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /add_wallet: —è–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —î ‚Äì –¥–æ–¥–∞—î –≥–∞–º–∞–Ω–µ—Ü—å, —è–∫—â–æ –Ω—ñ ‚Äì –Ω–∞–¥—Å–∏–ª–∞—î –ø—ñ–¥–∫–∞–∑–∫—É"""
    parts = message.text.split(maxsplit=2)

    if len(parts) < 3:  # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É", callback_data="copy_add_wallet")]
            ]
        )

        await message.answer(
            "‚úè **–©–æ–± –¥–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:**\n"
            "`/add_wallet –ù–∞–∑–≤–∞ –ê–¥—Ä–µ—Å–∞`\n\n"
            "üìå **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è!**",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –Ω–∞–∑–≤—É —Ç–∞ –∞–¥—Ä–µ—Å—É ‚Äì –¥–æ–¥–∞—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å
    user_id = message.from_user.id
    name, address = parts[1], parts[2]

    success = await add_wallet(user_id, name, address)

    if success:
        await message.answer(f"‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å `{name}` (`{address}`) —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    else:
        await message.answer("‚ö†Ô∏è –ì–∞–º–∞–Ω–µ—Ü—å –∑ —Ç–∞–∫–æ—é –∞–¥—Ä–µ—Å–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")

@dp.callback_query(lambda c: c.data == "copy_add_wallet")
async def copy_add_wallet_callback(callback_query):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ–º–∞–Ω–¥—É /add_wallet –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —É —á–∞—Ç"""
    await bot.send_message(
        callback_query.from_user.id,
        "/add_wallet –ù–∞–∑–≤–∞ –ê–¥—Ä–µ—Å–∞"
    )
    await bot.answer_callback_query(callback_query.id, text="‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —É –≤–∞—à —á–∞—Ç!")


# üìå –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥–∞–º–∞–Ω—Ü—ñ–≤ + –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@dp.message(Command("wallets"))
async def wallets_handler(message: Message):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –≥–∞–º–∞–Ω—Ü—ñ–≤ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.from_user.id
    wallets = await get_user_wallets(user_id)

    if not wallets:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤.")
        return

    for name, address, last_balance in wallets:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{name}"
                    )
                ]
            ]
        )
        await message.answer(
            f"üìå {name}: `{address}` (–ë–∞–ª–∞–Ω—Å: {last_balance} TRX)",
            reply_markup=keyboard,
        )

@dp.message(Command("delete_wallet"))
async def delete_wallet_prompt(message: Message):
    user_id = message.from_user.id
    wallets = await get_user_wallets(user_id)

    if not wallets:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üóë {name}", callback_data=f"delete:{name}")]
            for name, _, _ in wallets
        ]
    )

    await message.answer("üìå **–û–±–µ—Ä—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:**", reply_markup=keyboard)

# üìå –í–∏–¥–∞–ª–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
@dp.callback_query(lambda c: c.data.startswith("delete:"))
async def delete_wallet_callback(callback_query):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    user_id = callback_query.from_user.id
    name = callback_query.data.split(":")[1]
    success = await delete_wallet(user_id, name)

    if success:
        await callback_query.message.edit_text(f"‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å `{name}` –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –ì–∞–º–∞–Ω–µ—Ü—å `{name}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É."
        )


@dp.message(Command("subscribe"))
async def subscribe_handler(message: Message):
    """–î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤"""
    user_id = message.from_user.id
    success = await add_subscriber(user_id)

    if success:
        await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è!")
    else:
        await message.answer("‚ö† –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.")


async def check_wallets():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–ª–∞–Ω—Å–∏ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º"""
    wallets = await get_all_wallets()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ

    for name, address, last_balance in wallets:
        new_balance = get_trx_balance(address)  # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ API

        if new_balance > last_balance:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–≤ –¥–µ–ø–æ–∑–∏—Ç
            diff = new_balance - last_balance
            message = f"üì• –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è!\nüîπ **{name}**\nüìç `{address}`\nüí∞ +{diff} TRX (–Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} TRX)"

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            subscribers = await get_subscribers()
            for user_id in subscribers:
                try:
                    await bot.send_message(user_id, message)
                except Exception as e:
                    print(
                        f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}"
                    )

            # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —É –±–∞–∑—ñ
            await update_balance(address, new_balance)


@dp.message(Command("total_balance"))
async def total_balance_handler(message: Message):
    """–û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å–∏ —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å –≤—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ"""
    user_id = message.from_user.id
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    wallets = await get_all_wallets()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ
    total_balance = 0
    text = "üìä **–í—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ —Ç–∞ —ó—Ö –±–∞–ª–∞–Ω—Å–∏:**\n"

    for name, address, last_balance in wallets:
        balance = get_trx_balance(address)  # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
        await update_balance(address, balance)  # üîπ –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —É –ë–î
        total_balance += balance
        text += f"üîπ {name}: `{address}` ‚Üí {balance} TRX\n"

    text += f"\nüí∞ **–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:** {total_balance} TRX"
    await message.answer(text)


@dp.message(Command("set_admin"))
async def set_admin_handler(message: Message):
    """–ü—Ä–∏–∑–Ω–∞—á–∞—î —ñ–Ω—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id

    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer(
            "‚ùå **–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π!**\n\n"
            "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ `user_id` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
            "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É [@userinfobot](https://t.me/userinfobot)\n"
            "2Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É `/start`\n"
            "3Ô∏è‚É£ –°–∫–æ–ø—ñ—é–π—Ç–µ `user_id` —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"
            "`/set_admin user_id`",
            disable_web_page_preview=True,
        )
        return

    new_admin_id = int(parts[1])

    from database import is_user_exists
    if not await is_user_exists(new_admin_id):
        await message.answer(
            f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{new_admin_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞."
        )
        return

    await add_admin(new_admin_id)
    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{new_admin_id}` —Ç–µ–ø–µ—Ä —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")

async def scheduled_checker():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–ª–∞–Ω—Å–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω"""
    while True:
        await check_wallets()
        await asyncio.sleep(300)  # –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω


dp.message(Command("subscribe"))


async def subscribe_handler(message: Message):
    """–î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤"""
    user_id = message.from_user.id
    await add_subscriber(user_id)
    await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è!")

@dp.message(F.text == "üìã –ú–æ—ó –≥–∞–º–∞–Ω—Ü—ñ")
async def show_wallets(message: Message):
    await wallets_handler(message)

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É "–ë–∞–ª–∞–Ω—Å" —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –æ—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫"""
    print("üîç –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É: –ë–∞–ª–∞–Ω—Å")
    await balance_handler(message)

@dp.message(F.text == "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å")
async def total_balance_button(message: Message):
    await total_balance_handler(message)

# üìå –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(lambda message: message.text == "üìã –ú–æ—ó –≥–∞–º–∞–Ω—Ü—ñ")
async def show_wallets(message: Message):
    print("üîç –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É: –ú–æ—ó –≥–∞–º–∞–Ω—Ü—ñ")
    await wallets_handler(message)


@dp.message(lambda message: message.text == "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å")
async def total_balance_button(message: Message):
    await total_balance_handler(message)


@dp.message(F.text == "‚ö° –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def set_admin_button(message: Message):
    """–ù–∞–¥–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∑ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è user_id —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–º–∞–Ω–¥–∏"""
    explanation = (
        "üë§ **–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ `user_id` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:**\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É [@userinfobot](https://t.me/userinfobot)\n"
        "2Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É `/start`\n"
        "3Ô∏è‚É£ –°–∫–æ–ø—ñ—é–π—Ç–µ –æ—Ç—Ä–∏–º–∞–Ω–∏–π `user_id`\n\n"
        "‚úè **–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:**\n"
        "`/set_admin user_id`"
    )

    await message.answer(explanation, disable_web_page_preview=True)


@dp.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å")
async def add_wallet_button(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É", callback_data="copy_add_wallet")]
        ]
    )

    await message.answer(
        "‚úè **–©–æ–± –¥–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:**\n"
        "`/add_wallet –ù–∞–∑–≤–∞ –ê–¥—Ä–µ—Å–∞`\n\n"
        "üìå **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è!**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.message(F.text == "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
async def subscribe_button_handler(message: Message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ 'üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è'"""
    await subscribe_handler(message)

async def main():
    await update_db_schema()  # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É is_subscribed
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–∞!")
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    asyncio.create_task(scheduled_checker())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
